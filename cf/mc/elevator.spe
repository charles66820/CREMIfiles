with BuildingV3 do
  dead := any_s - src(any_t - self_epsilon);
  notResettable := any_s - coreach(initial, any_t);
  /*
   * SAFETY PROPERTIES P
   * Ecrire P : si "A" alors "B"
   * Calcul au choix de :
   *   notP := A & notB
   *   notP := A - B
   *   notP := notA - notB
   */
  /*
   * P1 : "When a button is push, it lights."
   * P1 : si "a button is push" alors "it lights"
   */

  // example 1
  // simplify :
  //A1 := label F[0].B.push;
  //B1 := [F[0].B.lightOn];
  //notP1 := tgt(A1) - B1;
  // by :
  //notP1 := tgt(label F[0].B.push) - [F[0].B.lightOn];

  // final
  notP1 := (tgt(label F[0].B.push) - [F[0].B.lightOn]) |
           (tgt(label F[1].B.push) - [F[1].B.lightOn]) |
           (tgt(label F[2].B.push) - [F[2].B.lightOn]) |
           (tgt(label F[3].B.push) - [F[3].B.lightOn]) |
           (tgt(label L.B[0].push) - [L.B[0].lightOn]) |
           (tgt(label L.B[1].push) - [L.B[1].lightOn]) |
           (tgt(label L.B[2].push) - [L.B[2].lightOn]) |
           (tgt(label L.B[3].push) - [L.B[3].lightOn]);

  /*
   * P2 : "When the corresponding serice is done, it lights off."
   * P2 : si "a service is done" alors "the corresponding buttons light off"
   */
  notP2 := any_s & (
            (tgt(label F[0].D.close) & [request[0]]) |
            (tgt(label F[1].D.close) & [request[1]]) |
            (tgt(label F[2].D.close) & [request[2]]) |
            (tgt(label F[3].D.close) & [request[3]])
           );
  /*
   * P3 : "At each floor, the door is close if the lift is not here."
   * P3 : si "the lift is not at level i" alors "the door at floor i is close"
   */
  notP3 := any_s & (
             ([L.level!=0] - [F[0].D.isClose]) |
             ([L.level!=1] - [F[1].D.isClose]) |
             ([L.level!=2] - [F[2].D.isClose]) |
             ([L.level!=3] - [F[3].D.isClose])
           );

  /*
   * P5 : "The software opens the door at some floor only if there is some requests for that floor."
   * P5 : si "The software opens the door at floor i" alors "there is some requests for floor i"
   */
  notP5 := (src(label open[0]) - [request[0]]) |
           (src(label open[1]) - [request[1]]) |
           (src(label open[2]) - [request[2]]) |
           (src(label open[3]) - [request[3]]);

  /*
   * P6 : "If there is no request, the lift must stay at the same floor."
   * P6 : si "there is no request "the lift must stay at the same floor"
   * P6 : si "the lift can move" alors "there is some request"
   */
  notP6 := any_s & (src(label L.down | label L.up)) -
           [request[0] | request[1] | request[2] | request[3]];


  /*
   * P7 : "When the lift moves, it mus stop where there is a request."
   * P7 : si "the lift is at floor i and there is  request for i" alors "the lift must stop at the floor i"
   */
  notP7 := any_s & (
             ([L.level=0 & request[0]] & src(label L.down | label L.up)) |
             ([L.level=1 & request[1]] & src(label L.down | label L.up)) |
             ([L.level=2 & request[2]] & src(label L.down | label L.up)) |
             ([L.level=3 & request[3]] & src(label L.down | label L.up))
           );

  /*
   * P8 : "When there are several requests, the software must (if necessary) continue in the same direction than its last move."
   * P8 : si "" alors ""
   */
  notP8 := any_s &
           (
             (reach(tgt(label up), any_t - label down) &
             [requestDown & requestUp] & src(label down)) |
             (reach(tgt(label down), any_t - label up) &
             [requestDown & requestUp] & src(label up))
           );
done

