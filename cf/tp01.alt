node Minimal
edon

node FIFO_V1
  state nbMessages : [0,2]; // defined multiple states `nbMessages` with value between 0 and 2
  init nbMessages := 0; // defined the initial state is `nbMessages = 0`
  event put, get; // defined all the event
  trans // describe transitions
    nbMessages < 2 |- put -> nbMessages := nbMessages + 1; // put | 1 | 2 // like rewrite
    nbMessages > 0 |- get -> nbMessages := nbMessages - 1; // get | 1 | 0 // like rewrite
edon

node FIFO_V2
  state nbMessages : [0,2];
  init nbMessages:= 0;
  event put, get;
  trans
    true |- put -> nbMessages:=nbMessages+1;
    true |- get -> nbMessages:=nbMessages-1;
edon

node Switch
  flow f1, f2 : [0, 1];
  state on : bool : public;
  init on := true;
  event push;
  trans
    true |- push -> on := ~on;
  assert
    on => (f1=f2);
edon

node Generator
  flow plus, minus : [0, 1];
  state on : bool : public;
  init on := true;
  event failure, repair;
  trans
    on  |- failure -> on := false;
    ~on |- repair -> on := true;
  assert
    plus=1;
    on=(minus=0);
edon

node Lamplight
  flow f1, f2 : [0, 1];
  state on, ok : bool;
  init ok := true;
  event reaction;
  trans
    ok & (f1=1&f2=1)  |- reaction -> ok := false, on := false;
    ok & (on=(f1=f2)) |- reaction -> on := ~on;
edon

node CircuitV1
  sub
    G : Generator;
    S : Switch;
    L : Lamplight;
  assert
    S.f1 = G.plus;
    L.f1 = S.f2;
    L.f2 = G.minus;
edon

node CircuitV2
  sub
    G : Generator;
    S : Switch;
    L : Lamplight;
  state safe : bool;
  init safe := false;
  event begin, repair, end;
  trans
    ~safe & ~G.on |- begin -> safe := true;
    safe          |- repair ->;
    safe & ~G.on  |- end -> safe := false;
  sync <repair, G.repair>;
  assert
    ~safe => (S.f1 = G.plus);
    safe => (S.f1 = 0);
    L.f1 = S.f2;
    L.f2 = G.minus;
edon

node PoolOfJobs
  state nbJobs : [0, 2] : public;
  init nbJobs := 0;
  event put, get;
  trans
    true |- put -> nbJobs := nbJobs + 1;
    true |- get -> nbJobs := nbJobs - 1;
edon

node SchedulerRandom
  sub PJ : PoolOfJobs[3];
edon

node SchedulerPriority
  sub    PJ : PoolOfJobs[3];
  event  run[3];
  trans
    true                            |- run[0] ->;
    PJ[0].nbJobs=0                  |- run[1] ->;
    PJ[0].nbJobs=0 & PJ[1].nbJobs=0 |- run[2] ->;
  sync
    <run[0], PJ[0].get>;
    <run[1], PJ[1].get>;
    <run[2], PJ[2].get>;
edon

node Scheduler
  sub PJ : PoolOfJobs[3];
  event run[3];
  event
    'run[0]' > 'run[1]';
    'run[1]' > 'run[2]';
  trans
    true |- run[0] ->;
    true |- run[1] ->;
    true |- run[2] ->;
  sync
    <run[0], PJ[0].get>;
    <run[1], PJ[1].get>;
    <run[2], PJ[2].get>;
edon

node Teacher
  state present : bool;
  init present := false;
  event in_out, speaks, paper;
  trans
    true    |- in_out -> present := ~present;
    present |- speaks, paper ->;
edon

node Student
  state present, havePencil : bool;
  init  present := false, havePencil := true;
  event in_out, listen, write;
  trans
    present  |- in_out -> present:=false, havePencil:=true;
    ~present |- in_out -> present:=true, havePencil:=true;
    ~present |- in_out -> present:=true, havePencil:=false;
    present  |- listen ->;
    present & havePencil |- write ->;
edon

node LessonDifficult
  sub
    T : Teacher;
    S : Student[3];
  sync
    <T.speaks,S[0].listen,S[1].listen,S[2].listen>;
    <T.paper,S[0].write,S[1].write>;
    <T.paper,S[0].write,S[2].write>;
    <T.paper,S[1].write,S[2].write>;
edon

node LessonUnpleasant
  sub
    T : Teacher;
    S : Student[3];
  sync
    <T.speaks,S[0].listen,S[1].listen,S[2].listen>;
    <T.speaks,S[0].listen,S[1].listen>;
    <T.speaks,S[0].listen,S[2].listen>;
    <T.speaks,S[1].listen,S[2].listen>;
    <T.speaks,S[0].listen>;
    <T.speaks,S[1].listen>;
    <T.speaks,S[2].listen>;
    <T.speaks>;
    <T.paper,S[0].write,S[1].write>;
    <T.paper,S[0].write,S[2].write>;
    <T.paper,S[1].write,S[2].write>;
    <T.paper,S[0].write>;
    <T.paper,S[1].write>;
    <T.paper,S[2].write>;
    <T.paper>;
edon

node LessonPriority
  sub
    T : Teacher;
    S : Student[3];
  event
    pr012 > {pr01,pr02,pr12};
    pr01 > {pr0, pr1};
    pr02 > {pr0, pr2};
    pr12 > {pr1, pr2};
    pr_0 < {pr0, pr1, pr2};
    st01 > {st0, st1};
    st02 > {st0, st2};
    st12 > {st1, st2};
    st_0 < {st0, st1, st2};
  trans
    true |- pr012,pr01,pr02,pr12,pr0,pr1,pr2,pr_0 ->;
    true |-       st01,st02,st12,st0,st1,st2,st_0 ->;
  sync
    <pr012,T.speaks,S[0].listen,S[1].listen,S[2].listen>;
    <pr01, T.speaks,S[0].listen,S[1].listen>;
    <pr02, T.speaks,S[0].listen,S[2].listen>;
    <pr12, T.speaks,S[1].listen,S[2].listen>;
    <pr0,  T.speaks,S[0].listen>;
    <pr1,  T.speaks,S[1].listen>;
    <pr2,  T.speaks,S[2].listen>;
    <pr_0, T.speaks>;
    <st01, T.paper,S[0].write,S[1].write>;
    <st02, T.paper,S[0].write,S[2].write>;
    <st12, T.paper,S[1].write,S[2].write>;
    <st0,  T.paper,S[0].write>;
    <st1,  T.paper,S[1].write>;
    <st2,  T.paper,S[2].write>;
    <st_0, T.paper>;
edon

node Lesson
  sub
    T : Teacher;
    S : Student[3];
  sync
    <T.speaks,S[0].listen?,S[1].listen?,S[2].listen?>;
    <T.paper,S[0].write?,S[1].write?,S[2].write?> <=2;
edon

const  LastLevel = 3;
domain Levels = [0,LastLevel];
// A comment that stops at the end of the line

/* A 5 lines comment.
 * No imbrication
 *
 *
*/
node A
  state a : bool;
edon

node B
  sub A1 : A;
  state b : bool;
  init b := true, A1.a := false;
edon

node C
  sub
    A2 : A;
    B1 : B;
  state c : bool;
  init A2.a := true, B1.b := false, B1.A1.a := true;
edon