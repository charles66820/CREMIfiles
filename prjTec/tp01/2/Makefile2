CC = gcc
CFLAGS = -g -Wall -std=c99
CPPFLAGS =
LDFLAGS = -lm
SOURCES = $(wildcard *.c)
OBJETS = $(SOURCES:.c=.o)

all : solve-TSP convert-2D-to-full

#tsp : memoire   // lib   # ar -cr libtsp.a tsp.o memoire.o matrice2d.o

#solve-TSP : tsp // exe  # gcc solve-TSP.o -lm -L. -ltsp -o solve-TSP

#convert-2D-to-full : tsp // exe   # gcc convert-2D-to-full.o -lm -L. -ltsp -o convert-2D-to-full

tsp.o : tsp.c
	$(CC) -c $(CFLAGS) -o $@ $<

memoire.o : memoire.c
	$(CC) -c $(CFLAGS) -o $@ $<

matrice2d.o : matrice2d.c
	$(CC) -c $(CFLAGS) -o $@ $<

solve-TSP.o : solve-TSP.c
	$(CC) -c $(CFLAGS) -o $@ $<

convert-2D-to-full.o : convert-2D-to-full.c
	$(CC) -c $(CFLAGS) -o $@ $<

libtsp.a : tsp.o memoire.o matrice2d.o
	ar -cr $@ $^

solve-TSP : solve-TSP.o libtsp.a
	$(CC) $< $(CFLAGS) -lm -L. -ltsp -o $@

convert-2D-to-full : convert-2D-to-full.o libtsp.a
	$(CC) $< $(CFLAGS) -lm -L. -ltsp -o $@

.PHONY : test
test :
	./convert-2D-to-full bays10.tsp bays10.dat && ./solve-TSP NN bays10.dat

.PHONY : clean
clean :
	rm -f $(OBJETS) *.a convert-2D-to-full solve-TSP *.dat