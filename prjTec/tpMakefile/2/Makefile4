CC = gcc
CFLAGS = -g -Wall -std=c99
CPPFLAGS =
LDFLAGS = -lm
SOURCES = $(wildcard *.c)
OBJETS = $(SOURCES:.c=.o)

all : solve-TSP convert-2D-to-full

# créer la library tsp
libtsp.a : tsp.o memoire.o matrice2d.o
	ar -cr $@ $^

# crée les exécutables
solve-TSP : solve-TSP.o libtsp.a
	$(CC) $< $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) -L. -ltsp -o $@

convert-2D-to-full : convert-2D-to-full.o libtsp.a
	$(CC) $< $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) -L. -ltsp -o $@

# génére les dépandance créer
include depends.txt

# faire make test pour tester rapidement si ça fonctionne
.PHONY : test
test : all
	./convert-2D-to-full bays10.tsp bays10.dat && ./solve-TSP NN bays10.dat

# nettoie le dossier des fichiers créer
.PHONY : clean
clean :
	rm -f $(OBJETS) *.a convert-2D-to-full solve-TSP *.dat depends.txt

# défini les fichier obj a partire des dépendance
depends.txt :
	$(CC) -M $(CPPFLAGS) $(LDFLAGS) $(SOURCES) > depends.txt

# tsp : memoire   // lib   # ar -cr libtsp.a tsp.o memoire.o matrice2d.o
# solve-TSP : tsp // exe  # gcc solve-TSP.o -lm -L. -ltsp -o solve-TSP
# convert-2D-to-full : tsp // exe   # gcc convert-2D-to-full.o -lm -L. -ltsp -o convert-2D-to-full
